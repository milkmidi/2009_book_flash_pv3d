package{	import org.papervision3d.materials.shadematerials.PhongMaterial;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.objects.primitives.Cube;	import org.papervision3d.materials.utils.MaterialsList;	import org.papervision3d.view.BasicView;	import org.papervision3d.lights.PointLight3D;	import org.papervision3d.events.InteractiveScene3DEvent;	import caurina.transitions.Tweener;			import flash.display.*;	import flash.events.*;	public class Box3DWorld_01 extends MovieClip {				private var offset			:int = 280;		//Cube的間距		private	var light			:PointLight3D;		//點光源物件		private var rootNode		:DisplayObject3D;		//空白DisplayObject3D, 		//用來當作9個方塊的容器, 		//視度的效果只需對該物件修改		private var view			:BasicView;		public function Box3DWorld_01(){			init3DEngine();			init3DObject();		}		private function init3DEngine():void {			//建立PV3D世界			view = new BasicView(0, 0, true, true, "Target");			view.camera.y = 850;			view.camera.z = -500;			view.camera.zoom = 3;			view.camera.focus = 90;			//設定 Camera 屬性			this.addChild(view);			this.addEventListener(Event.ENTER_FRAME, onEventRender3D);		}		private function init3DObject():void{			light = new PointLight3D();			//建構點光源物件			light.y = 300;			rootNode = new DisplayObject3D();			//建構空白的 DisplayObject3D			rootNode.rotationZ = 15;			view.scene.addChild(rootNode);			var phongMat:PhongMaterial = new PhongMaterial(light, 0xffffff, 0x999999, 10);			//光源材質。			phongMat.interactive = true;			//互動模式。			var ml:MaterialsList = new MaterialsList( { all:phongMat } );			//材質列表, 六面都貼上光源材質。			for (var i:int = 0 ; i < 9; i++ ) {				//使用回圈建立9個Cube物件。				var _cube:Cube = new Cube(ml, 200, 200, 200);				//Cube物件, 長、深、寬皆為200。				_cube.x =  i % 3 * offset - offset;								_cube.y =  Math.floor(i / 3) * offset - offset;				//使用取餘數和除法排列9宮格。				_cube.name = "cube" + i;				_cube.addEventListener(InteractiveScene3DEvent.OBJECT_OVER, on3DOver);				_cube.addEventListener(InteractiveScene3DEvent.OBJECT_OUT, on3DOut);				rootNode.addChild(_cube);			}					}		private function on3DOver(e:InteractiveScene3DEvent):void{			Tweener.addTween(e.displayObject3D,			{				scale		:1.1,				time		:.5,				transition	:"easeOutBounce"			});		}		private function on3DOut(e:InteractiveScene3DEvent):void{			Tweener.addTween(e.displayObject3D,			{				scale		:1,				time		:.5,				transition	:"easeOutBounce"			});		}		private function onEventRender3D(e:Event):void{			var _targetX:Number = (stage.stageWidth / 2 - stage.mouseX) / 2;						var _targetY:Number = (stage.stageHeight / 2 - stage.mouseY) / 2;			//取得滑鼠離場景中間的距離差, 因為數值過大, 所以除以2。			//把該值當作目標點, 套入漸近公式。			view.camera.x += (_targetX - view.camera.x) / 6;			view.camera.y += (_targetY - view.camera.y) / 6;						view.singleRender();		}	}}